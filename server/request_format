Error:
{
    "type":request["type"],
    "data":{
        "result":"failed",
        "error":error_message
    }
}//server to client to send error message


Alive:
{
    "type":ALIVE
}//client to server to check online


Login:
{
    "type":LOGIN,
    "data":{
        "user_id":
        "email":
        "pwd":
    }
}//client to server to login
//**pwd and one of email and user_id are required**
{
    "type":LOGIN,
    "date":{
        "result":"login successfully",
        "user_id":
        "email":
        "user_name":
        "birthday":
        "avatar_filename":
        "signature":
        "token":
    }
}//server to client


Register:
{
    "type":REGISTER,
    "data":{
        "email":
        "pwd":
        "username":
        "birthday":
    }
}//client to server to register
{
    "type":REGISTER,
    "data":{
        "result":"register"
        "user_id":
    }
}//server to client


Logout
{
    "type":LOGOUT,
    "token":
}//client to server to logout


SearchUser
{
    "type":SEARCH_USER,
    "token":
    "data":{
        "user_id"
        "keyword":
    }
}// client to server to search user by keyword
{
    "type":SEARCH_USER,
    "data":[
        {
            "user_id":
            "user_name":
            "email":
            "birthday":
            "avarta_filename":
        },
        ...
    ]
}

addFriend
{
    "type":ADD_FRIEND,
    "token":
    "data":{
        "user_id":
        "to_id":
        "message":
    }
}//invite others to be your friend
{
    "type":ADD_FRIEND,
    "data":{
        "result":"send successfully"
    }
}


getFriendRequest
{
    "type":GET_FRIEND_REQUEST,
    "token":
    "data":{
        "user_id":
    }
}
{
    "type":GET_FRIEND_REQUEST,
    "data":[
        {
            "from_id":
            "name":
            "message":
        },
        ...
    ]
}


acceptFriend
{
    "type":ACCEPT_FRIEND,
    "token":
    "data":{
        "user_id":
        "from_id":
        "accept"://true or false
    }
}//accept or not
{
    "type":ACCEPT_FRIEND,
    "data":{
        "result":"refuse successfully"/"accept successfully"
    }
}


deleteFriend
{
    "type":DELETE_FRIEND,
    "token":
    "data":{
        "user_id":
        "friend_id":
    }
}
{
    "type":DELETE_FRIEND,
    "token":
    "data":{
        "user_id":
        "friend_id":
    }
}


getFriends
{
    "type":GET_FRIENDS,
    "token":
    "data":{
        "user_id":
    }
}//client to server to get friends
{
    "type":GET_FRIENDS,
    "data":[
        {
            "friend_id":
            "friend_name":
            "avatar_filename":
            "signature":
            "birthday":
            "is_online"://true or false
        },
        ....
    ]
}//server to client


sendPrivateMessage
{
    "type":PRIVATE_MESSAGE,
    "token":
    "data":{
        "user_id":
        "to_id":
        "time":
        "content":
    }
}//client to server to send private message
{
    "type":PRIVATE_MESSAGE,
    "data":{
        "from_id":
        "to_id":
        "time":
        "content":
    }
}
//server to client to forward private message
{
    "type":PRIVATE_MESSAGE,
    "data":{
        "result":"success send"/"wait send"
    }
}//server to client sender


sendUnreadMessage
{
    "type":UNREAD_PRIVATE_MESSAGE
    "data":[
        {
            "type":PRIVATE_MESSAGE,
            "data":{
                "from_id":
                "to_id":
                "time":
                "content":
            }
        },
        ...
    ]
}//server to client
// ** will auto be sent after getFriends **


getHistoryMessage
{
    "type":GET_HISTORY_PRIVATE,
    "token":
    "data":{
        "user_id":
        "from_id":
        "begin_time":
        "end_time":
    }
}//client to server to get private message
// time is optimal, we will use "2000-01-01 00:00:00" as the beginning time and now() as the ending time
{
    "type":GET_HISTORY_PRIVATE,
    "data":[
        {
            "from_id":
            "to_id":
            "time":
            "content":
        },
        ...
    ]
}//server to client